<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <!-- 配置Spring监听器 -->
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- 指定加载Spring的核心配置文件 -->
 	
	  <context-param>
	  <param-name>contextConfigLocation</param-name>
	  <!-- 需要注意的是：spring配置文件的加载路径，别写错了。注意那个*，别丢掉-->
	  <param-value>classpath:spring/applicationContext*.xml</param-value>
	  </context-param>
	  
	
  <!-- 编码过滤器，以UTF8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
	<!--配置shiroFilter  -->
	<filter>
		<!--需要注意：filter-name的名字，要和spring-shiro整合文件里 shiroFilter bean的名字一致，因为spring是根据bean的id名字  去代理类-->	
		<filter-name>shiroFilter</filter-name>
		
		<!--DelegatingFilterProxy这个类是Spring web的模块里的类，它的继承树结构：
			GenericFilterBean=>Filter即，它是一个Filter这个类的作用：
			根据指定的bean的名字，生成对应的Filter的代理类，前提是这个bean是一个Filter
		  -->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!--  -->
			<param-name>targetFilterLifecycle</param-name>
			
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<!--让shiroFilter来管理所有的请求，注意：要配置/*的形式，如果配置成/的形式，shiro不认识  -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  <!-- 配置SpringMVC核心入口类 -->
	<servlet>
	<servlet-name>smvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 需要注意：文件的加载路径，别写错了 -->
			<param-value>classpath:spring/springmvc-config.xml</param-value>
		</init-param>
		<!-- servelt默认是当第一次被访问时，被创建。但如果想在容器创建完事后，servlet就创建
			就用<load-on-startup>来指定。<load-on-startup>里的数字，只要是大于0,就表示
			servelt随容器的启动而启动（不配置也可以，就是引出一个知识点） -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>smvc</servlet-name>
		<!-- 如果配置 / 代表SpringMVC拦截所有的请求，导致静态资源被拦截，导致不能正常访问
		    解决办法：在Springmvc的核心配置文件，配置一个标签 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
	<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>
	
</web-app>
